// Code generated by options-setters; DO NOT EDIT.

package complex

import (
	"context"
	"time"
)

type TimeoutGetter interface {
	GetTimeout() time.Duration
}

func WithTimeoutSetter(s TimeoutGetter) Option {
	return func(cs *Config) {
		if s != nil {
			cs.timeout = s.GetTimeout()
		}
	}
}

type ContextGetter interface {
	GetContext() context.Context
}

func WithContextSetter(s ContextGetter) Option {
	return func(cs *Config) {
		if s != nil {
			cs.ctx = s.GetContext()
		}
	}
}

type HandlerGetter interface {
	GetHandler() func(error) bool
}

func WithHandlerSetter(s HandlerGetter) Option {
	return func(cs *Config) {
		if s != nil {
			cs.handler = s.GetHandler()
		}
	}
}

type DeadlineGetter interface {
	GetDeadline() time.Time
}

func WithDeadlineSetter(s DeadlineGetter) Option {
	return func(cs *Config) {
		if s != nil {
			cs.deadline = s.GetDeadline()
		}
	}
}

// WithConfigurator sets multiple options from
// a single configuration struct that implements
// one or more Getter interfaces
func WithConfigurator(i interface{}) Option {
	return func(cs *Config) {

		if s, ok := i.(TimeoutGetter); ok {
			cs.timeout = s.GetTimeout()
		}

		if s, ok := i.(ContextGetter); ok {
			cs.ctx = s.GetContext()
		}

		if s, ok := i.(HandlerGetter); ok {
			cs.handler = s.GetHandler()
		}

		if s, ok := i.(DeadlineGetter); ok {
			cs.deadline = s.GetDeadline()
		}

	}
}
