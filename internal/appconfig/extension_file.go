package appconfig

import (
	"fmt"
	"os"

	"github.com/ettle/strcase"
	"gopkg.in/yaml.v3"
)

// ExtensionField defines metadata for a single field.
type ExtensionField struct {
	Name      string `yaml:"name"`     // field name as generated by default (e.g. "AssetsFs")
	Overwrite string `yaml:"override"` // field name to use in the final struct (e.g. "AssetsFS")
	Type      string `yaml:"type"`     // The type override (e.g. "fs.FS")
}

// ExtensionConfig maps a normalized key (for a struct) to its list of extension fields.
type ExtensionConfig map[string][]ExtensionField

func loadExtensionFile(filepath string) (ExtensionConfig, error) {
	raw, err := os.ReadFile(filepath)
	if err != nil {
		return nil, fmt.Errorf("failed to read extension file: %v", err)
	}

	var ext ExtensionConfig
	if err := yaml.Unmarshal(raw, &ext); err != nil {
		return nil, fmt.Errorf("failed to unmarshal extension file: %v", err)
	}
	return ext, nil
}

func normalizeKey(s string) string {
	// ViewConfig => view_config
	return strcase.ToSnake(s)
}
